var Schema = require('mongoose').Schema;
var passport = require('passport');
var once = require('once');
var UserPlugin = require('passport-local-mongoose');
var db = require('./');
var NewUser = require('./newuser.js');

var UserSchema = new Schema({
  //'_id' used as userID for linking to other tables, autogenerated by DB
  //password registered from newusers table stored as salt and hash
  username: String,
  salt: String,
  hash: String, 
  email: String,
  HID: String, 
  firstLogin: Boolean,
  visPublic: Boolean,
  passReset: String,
  answered: Array
});
UserSchema.plugin(UserPlugin, { usernameField: 'email' });

var User = db.model('user', UserSchema);
module.exports = User;

User.challenge = function (req, res, cb) {
  cb = once(cb);
  NewUser.findOne({ email: req.body.email }, onfind);
  var auth = passport.authenticate('local', onauth);

  function onfind (err, user) {
    if (err) return cb(err);
    if (user) return cb(error('confirm',
      'You need to confirm your email before you can sign in.'
    ));
    auth(req, res, cb);
  }
 
  function onauth (err, user, failure) {
    if (err) cb(err)
    else if (failure) cb(new Error(failure.message))
    else cb(null, user)
  }
};

function error (code, msg) {
  var err = new Error(msg);
  err.code = code;
  return err;
}
